# -*- coding: utf-8 -*-
"""Prophet_NetProfit

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mD0skONFf411wnJO8mxQ75HCKKc4ZO24
"""

!pip install pykrx
from pykrx import stock

stock_code = stock.get_market_ticker_list(date="20220814", market="KOSPI")

# stock_name = stock.get_market_ticker_name("005930")

df = stock.get_market_ohlcv_by_date(fromdate="20190101", todate="20211231", ticker="005930")

import time
import pandas as pd

stock_code = stock.get_market_ticker_list() # 현재일자 기준 가장 가까운 영업일의 코스피 상장종목 리스트
res = pd.DataFrame()
for ticker in stock_code[:4]:
    df = stock.get_market_ohlcv_by_date(fromdate="20190101", todate="20211231", ticker=ticker)
    df = df.assign(종목코드=ticker, 종목명=stock.get_market_ticker_name(ticker))
    res = pd.concat([res, df], axis=0)
    time.sleep(1)
res = res.reset_index()
res

"""## Prophet

코드 활용 출처


*   시계열 예측 패키지 Prophet 소개 (https://hyperconnect.github.io/2020/03/09/prophet-package.html)
*   시계열 예측을 위한 Facebook Prophet 사용하기 (https://zzsza.github.io/data/2019/02/06/prophet/)
*   Prophet을 이용한 주가 예측 (https://skyeong.net/290)
"""

!pip install pystan~=2.14
!pip install fbprophet

import pandas as pd
from fbprophet import Prophet

sample_df = stock.get_market_ohlcv_by_date(fromdate="20190101", todate="20211231", ticker="005930")
sample_df

sample_df.index

sample_df.reset_index()['종가']

df = pd.DataFrame()

df['ds'] = pd.to_datetime(sample_df.index, format = '%Y-%m-%d')
df['y'] = sample_df.reset_index()['종가']
print(df)

m = Prophet() # Default growth='linear'
m.fit(df)

future = m.make_future_dataframe(periods=2)
forecast = m.predict(future)

forecast[-2:]

forecast_val = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']][-1:]
forecast_val

"""수익률

$\dfrac{y_{1} - y_{0}}{y_{0}} \cdot 100 (\%) $
"""

## 수익률
((float(forecast_val['yhat']) - float(df['y'][-1:])) / float(df['y'][-1:]))*100

"""## 전체 주식에 대하여"""

!pip install pykrx

!pip install pystan~=2.14
!pip install fbprophet

from pykrx import stock
import time
import pandas as pd
from fbprophet import Prophet

##100개 종목 약 8분 소요
##전체 종목 1시간 20분 12초 소요

stock_code = stock.get_market_ticker_list(date="20211231", market="KOSPI")

result_df = pd.DataFrame()

for ticker in stock_code:
  print(ticker)

  try:
    output_df = pd.DataFrame({'종목코드' : [ticker], '종목명' : [stock.get_market_ticker_name(ticker)]})

    sample_df = stock.get_market_ohlcv_by_date(fromdate="20190101", todate="20211231", ticker=ticker)

    df = pd.DataFrame()
    df['ds'] = pd.to_datetime(sample_df.index, format = '%Y-%m-%d')
    df['y'] = sample_df.reset_index()['종가']

    m = Prophet() # Default growth='linear'
    m.fit(df)

    future = m.make_future_dataframe(periods=8) # periods = (예측할 기간 + 1)
    forecast = m.predict(future)

    forecast_val = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']][-1:]
    output_df['예상수익률'] = ((float(forecast_val['yhat']) - float(df['y'][-1:])) / float(df['y'][-1:]))*100

    result_df = pd.concat([result_df, output_df], axis=0)
    time.sleep(1)

  except:
    print(output_df)

result_df = result_df.sort_values('예상수익률')

result_df = result_df.sort_values('예상수익률', ascending=False)

result_df

result_df.to_excel('result.xlsx')





"""## 파일 받아들인 후 수익률 순위 계산"""

import pandas as pd

!pip install pykrx
from pykrx import stock

result = pd.read_excel('/content/result.xlsx', index_col=0)

!unzip -qq '/content/22_hf382-lab-DATA-MYDAT-dataset.zip'

url = '/content/22_hf382-lab-DATA-MYDAT-dataset/DATA/MYDAT/dataset'



result.shape

result

sample_df = pd.read_csv('/content/22_hf382-lab-DATA-MYDAT-dataset/DATA/MYDAT/dataset/104575.csv')
sample_df = sample_df.sort_values('Stock_id')
sample_df

sample_df.shape

import datetime

print(str(datetime.datetime.strptime(str(sample_df['Date'][0]), "%Y-%m-%d"))[:10])

total_input = 0
for i in range(len(sample_df)):
  try:
    if pd.isna(float(sample_df['Stock_price'][i]*sample_df['Quantity'][i])) == False:
      total_input += float(sample_df['Stock_price'][i]*sample_df['Quantity'][i])
    
    else:
      ticker_num = sample_df['Stock_id'][i]

      # date_data = datetime.datetime.strptime(str(sample_df['Date'][i]), "%Y-%m-%d")
      # day_before_7 = date_data - datetime.timedelta(days=7)
      # start_date = str(day_before_7)[:10].replace('-','')
      # end_date = str(date_data)[:10].replace('-','')
      
      replace_df = stock.get_market_ohlcv_by_date(fromdate='2021-12-24', todate='2021-12-31', ticker=ticker_num)
      total_input += float(replace_df['종가'][-1] * sample_df['Quantity'][i])

  except:
    print('error')

print(total_input)

"""



* 수익률 예측 기준 -> 사용자가 모델을 사용하는 시점을 2021-12-31로 가정하여 그 후 일주일의 종가를 예측

* 수익률 비교 -> $\Sigma_{i, j}$ [(사용자가 j 시점에 구매한 종목 i의 가격) * 개수]과 [종목 i의 총 보유 수량 * 2022-01-07 예측 종가]의 차이 vs 2021-12-31 시점에 사용자의 모든 주식을 팔았을 때의 금액과 그 금액으로 구매한 특정 종목의 일주일 후인 2022-01-07의 예측 종가와의 차이

* 문제점 -> 여러 종목을 받아들이는데 이 때 단일 종목으로만 제시?

* NaN 처리? -> 가격의 NaN은 입력 시점 20211231 기준 가장 최근의 종가 가격으로 대신함
*   항목 추가





"""

!pip install pykrx
!pip install pystan~=2.14
!pip install fbprophet
from pykrx import stock
import time
import pandas as pd
from fbprophet import Prophet

pd.options.display.float_format = '{:.1f}'.format

total_input = 11779759.0

stock_code = stock.get_market_ticker_list(date="20211231", market="KOSPI")

result_df = pd.DataFrame()

for i in range(50):
  ticker = stock_code[i]

  try:
    output_df = pd.DataFrame({'종목코드' : [ticker], '종목명' : [stock.get_market_ticker_name(ticker)]})

    sample_df = stock.get_market_ohlcv_by_date(fromdate="20190101", todate="20211231", ticker=ticker)

    df = pd.DataFrame()
    df['ds'] = pd.to_datetime(sample_df.index, format = '%Y-%m-%d')
    df['y'] = sample_df.reset_index()['종가']

    m = Prophet() 
    m.fit(df)

    future = m.make_future_dataframe(periods=8) 
    forecast = m.predict(future)

    forecast_val = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']][-1:]
    output_df['당시 종가'] = float(df['y'][-1:])
    output_df['구매가능 수량'] = total_input//float(df['y'][-1:])
    output_df['예상 종가'] = float(forecast_val['yhat'])
    output_df['예상 수익률'] = ((float(forecast_val['yhat']) - float(df['y'][-1:])) / float(df['y'][-1:]))*100
    output_df['예상 총 수익'] = (total_input//float(df['y'][-1:])) * float(forecast_val['yhat'])

    result_df = pd.concat([result_df, output_df], axis=0)
    time.sleep(1)

  except:
    print('error', ticker)

result_df = result_df.sort_values('예상 총 수익', ascending = False)

result_df

