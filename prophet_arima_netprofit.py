# -*- coding: utf-8 -*-
"""Prophet_Arima_NetProfit

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KhkXLsfVMTmd5IWuhjpOUVf7QEze6BpC
"""

from google.colab import drive

drive.mount('/content/drive')

import os
os.chdir('/content/drive/MyDrive')

import sys

sys.path.append('content/drive/MyDrive')
sys.path

import pandas as pd
import numpy as np

KOSPI_300 = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/kospi_300.csv',  encoding='cp949')
Close_300 = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/Close300.csv')

KOSPI_300

Close_300

"""## Prophet을 이용한 주식 가격 예측

코드 활용 출처


*   시계열 예측 패키지 Prophet 소개 (https://hyperconnect.github.io/2020/03/09/prophet-package.html)
*   시계열 예측을 위한 Facebook Prophet 사용하기 (https://zzsza.github.io/data/2019/02/06/prophet/)
*   Prophet을 이용한 주가 예측 (https://skyeong.net/290)
"""

!pip install pykrx
!pip install pystan~=2.14
!pip install fbprophet

import pandas as pd
from pykrx import stock
import time
from fbprophet import Prophet

pd.options.display.float_format = '{:.2f}'.format

"""사용 가능 자산 증가율

$\dfrac{\mbox{순 이익}}{total\,\,input} \cdot 100 (\%) $

수익률

$\dfrac{y_1 - y_0}{y_0} * 100(\%)$
"""

# input_df = KOSPI_300
# data_df = Close_300
# total_input = 사용 가능한 자산 

def prophet_df(input_df, data_df, total_input = 1000000):
  result_df = pd.DataFrame()
  for i in range(len(input_df)):

    try:
      ticker = str(0)*(6 - len(str(input_df['종목코드'][i]))) + str(input_df['종목코드'][i]) 
      stock_name = str(input_df['종목명'][i])
      find_column_name = ticker + '_' + stock_name
      output_df = pd.DataFrame({'종목코드':[ticker], '종목명':[stock_name]})
      
      df = pd.DataFrame()
      df['ds'] = pd.to_datetime(data_df['Date'], format = '%Y-%m-%d')
      df['y'] = data_df[find_column_name]
       
      m = Prophet(daily_seasonality=True)
      m.fit(df)
       
      future = m.make_future_dataframe(periods=8) 
      forecast = m.predict(future)

      forecast_val = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']][-1:]
      output_df['현재 종가'] = float(df['y'][-1:])
      output_df['예상 종가'] = float(forecast_val['yhat'])
      output_df['최대 구매 수량'] = total_input//float(df['y'][-1:])
      output_df['남은 잔액'] = total_input - total_input//float(df['y'][-1:]) * float(df['y'][-1:])

      if total_input//float(df['y'][-1:]) == 0:
        output_df['예상 총 수익'] = 0
        output_df['예상 순이익'] = 0
        output_df['예상 수익률'] = 0
       
      elif total_input//float(df['y'][-1:]) >= 1:
        output_df['예상 총 수익'] = total_input//float(df['y'][-1:]) * float(forecast_val['yhat'])
        output_df['예상 순이익'] = total_input//float(df['y'][-1:]) * (float(forecast_val['yhat']) -  float(df['y'][-1:]))
        output_df['예상 수익률'] = ((float(forecast_val['yhat']) -  float(df['y'][-1:])) / float(df['y'][-1:])) * 100
        output_df['자산 예상 증가율'] = ((total_input//float(df['y'][-1:]) * (float(forecast_val['yhat']) -  float(df['y'][-1:]))) / total_input) * 100
       
      result_df = pd.concat([result_df, output_df], axis=0)
      time.sleep(1)

    except:
     pass
    
  top10_result = result_df.sort_values('예상 순이익', ascending = False)[:10]
  top10_result.set_index(keys=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], inplace = True, drop = False)
  return top10_result

train_idx = Close_300.index[Close_300['Date'] == '2021-12-30'].tolist()[0]

result_df = prophet_df(KOSPI_300[:30], Close_300[:(train_idx+1)], 1000000)

result_df

answer_index = Close_300.index[Close_300['Date'] == '2022-01-07'].tolist()[0]

answer_300 = Close_300[answer_index:answer_index+1]
answer_300

def compare(result, answer, total_input):
  compare_df = pd.DataFrame()
  each_df = result[['종목코드', '종목명', '예상 종가', '예상 순이익', '예상 수익률', '자산 예상 증가율']]

  for i in range(len(each_df)):
    idx_name = str(result['종목코드'][i]) + '_' + str(result['종목명'][i])

    each_df = pd.DataFrame({'종목코드':[result['종목코드'][i]], '종목명':[result['종목명'][i]]})

    each_df['예상 종가'] = result['예상 종가'][i]
    each_df['실제 종가'] = answer[idx_name].tolist()[0]

    each_df['예상 순이익'] = result['예상 순이익'][i]
    each_df['실제 순이익'] = result['최대 구매 수량'][i] * (each_df['실제 종가'] - result['현재 종가'][i])  

    each_df['예상 수익률'] = result['예상 수익률'][i]
    each_df['실제 수익률'] = ((each_df['실제 종가'] - result['현재 종가'][i]) / result['현재 종가'][i]) * 100  

    each_df['자산 예상 증가율'] = result['자산 예상 증가율'][i]
    each_df['자산 실제 증가율'] = ((each_df['실제 종가'] - result['현재 종가'][i]) / total_input) * 100  

    compare_df = pd.concat([compare_df,  each_df], axis=0)
    time.sleep(1)

  compare_df.set_index(keys=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], inplace = True, drop = False)
  return compare_df

test_df = compare(result_df, answer_300, 1000000)

test_df

"""## ARIMA 모형을 이용한 주식 가격 예측

출처 https://assaeunji.github.io/data%20analysis/2021-09-25-arimastock/
"""

!pip install pmdarima

from statsmodels.tsa.arima_model import ARIMA
import statsmodels.api as sm

import pmdarima as pm
from pmdarima.arima import ndiffs

def arima_df(input_df, data_df, total_input = 1000000):
  result_df = pd.DataFrame()
  for i in range(len(input_df)):

    try:
      ticker = str(0)*(6 - len(str(input_df['종목코드'][i]))) + str(input_df['종목코드'][i]) 
      stock_name = str(input_df['종목명'][i])
      find_column_name = ticker + '_' + stock_name
      output_df = pd.DataFrame({'종목코드':[ticker], '종목명':[stock_name]})
      
      y_train = data_df[find_column_name]
       
      kpss_diffs = ndiffs(y_train, alpha=0.05, test='kpss', max_d=6)
      adf_diffs = ndiffs(y_train, alpha=0.05, test='adf', max_d=6)
      n_diffs = max(adf_diffs, kpss_diffs)

      model = pm.auto_arima(y = y_train, d = n_diffs, seasonal = True, stepwise = False, trace = False)
      forecast_val = model.predict(n_periods = 7)[-1:]

      output_df['현재 종가'] = float(y_train[-1:])
      output_df['예상 종가'] = float(forecast_val)
      output_df['최대 구매 수량'] = total_input//float(y_train[-1:])
      output_df['남은 잔액'] = total_input - total_input//float(y_train[-1:]) * float(y_train[-1:])

      if total_input//float(y_train[-1:]) == 0:
        output_df['예상 총 수익'] = 0
        output_df['예상 순이익'] = 0
        output_df['예상 수익률'] = 0
       
      elif total_input//float(y_train[-1:]) >= 1:
        output_df['예상 총 수익'] = total_input//float(y_train[-1:]) * float(forecast_val)
        output_df['예상 순이익'] = total_input//float(y_train[-1:]) * (float(forecast_val) -  float(y_train[-1:]))
        output_df['예상 수익률'] = ((float(forecast_val) -  float(y_train[-1:])) / float(y_train[-1:])) * 100
        output_df['자산 예상 증가율'] = ((total_input//float(y_train[-1:]) * (float(forecast_val) -  float(y_train[-1:]))) / total_input) * 100
       
      result_df = pd.concat([result_df, output_df], axis=0)
      time.sleep(1)

    except:
     pass
    
  top10_result = result_df.sort_values('예상 순이익', ascending = False)[:10]
  top10_result.set_index(keys=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], inplace = True, drop = False)
  return top10_result

ari_result_df = arima_df(KOSPI_300[:30], Close_300[:(train_idx+1)], 1000000)

ari_result_df

ari_test_df = compare(ari_result_df, answer_300, 1000000)

ari_test_df