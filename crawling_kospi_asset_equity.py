# -*- coding: utf-8 -*-
"""Crawling_KOSPI_Asset_Equity

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1supcYWI_yBQdZ095aTIxBTTfmK_A6AMf

*   20220803:
1. 주식 종목 숫자 코드 가져와서 반복문을 돌리면서 총자산 데이터프레임 한 세트와 총자본 데이터프레임 한 세트 만들기 -> NaN 열 추가되는 현상 해결
2. 특정 주식 종목과 다른 주식 종목들의 총자본, 총자산을 이용한 유사도 계산 코드 구현

*   20220804:
1. 현재 'IFRS(연결)'로 재무제표가 기록되어 있는 기업들만 크롤링하는 코드 구현 -> 다른 경우('IFRS(개별)' 등)에도 크롤링?
2. 하나의 주식 종목에 대해 유사도를 계산하는 코드 구현

*   20220807:
1. 2019/12, 2020/12, 2021/12 기준 총자산, 총자본이 기록되어 있는 코스피 종목들 정보를 데이터프레임으로 정리 (숫자코드, 이름, 2019/12, 2020/12, 2021/12)
2. 'IFRS(연결)', 'IFRS(개별)', 'GAAP(연결)', 'GAAP(개별)' 각각을 크롤링 하는 코드도 구현

# 총자산, 총자본 크롤링

코드 활용 출처 : https://quantgnu.tistory.com/3

### 시범 코드
"""

import pandas as pd
import requests

# 예시 - 삼성전자(005930)
code_num = '005930'
fs_url = 'http://comp.fnguide.com/SVO2/ASP/SVD_Finance.asp?pGB=1&gicode=A' + code_num + '&cID=&MenuYn=Y&ReportGB=&NewMenuID=103&stkGb=701'
print(fs_url)

fs_page = requests.get(fs_url)
fs_tables = pd.read_html(fs_page.text)

temp_df = fs_tables[2]
temp_df.columns[0]

temp_df

temp_df = fs_tables[2]
temp_df = temp_df.set_index('IFRS(연결)')

asset_df = temp_df.loc[['자산']]
asset_df = asset_df[[ '2014/12','2015/12','2016/12',	'2017/12',	'2018/12']]
asset_df = asset_df.rename(index = {'자산': code_num})

equity_df = temp_df.loc[['자본']]
equity_df = equity_df[['2019/12',	'2020/12',	'2021/12']]
equity_df = equity_df.rename(index = {'자본': code_num})

#총자산, 단위 : 억원
asset_df

#총자본, 단위 : 억원
equity_df

"""## 코드

*   한국거래소 상장종목 가져오는 코드는 예진님 코드 이용
"""

!pip install finance-datareader
!pip install -U finance-datareader

import FinanceDataReader as fdr
import pandas as pd
from tqdm import tqdm

import pandas as pd
import requests

# 한국거래소 상장종목 전체
df_krx = fdr.StockListing('KRX')
df_krx.head()

df_krx.dropna(inplace=True)
df_krx = df_krx.loc[df_krx['Market']=='KOSPI']

"""

*   회계기준이 IFRS, GAAP로 나뉘어져 있고, 연결/개별로 나뉘어져 있음

"""

df_krx_num_name = df_krx[['Symbol', 'Name']]

df_krx_num_name

# 전체 데이터프레임 제작
idx_list_not_include = []
category_list = ['IFRS(연결)', 'IFRS(개별)', 'GAAP(연결)', 'GAAP(개별)']

asset_df = pd.DataFrame()
equity_df = pd.DataFrame()

for idx in range(len(df_krx_num_name)):
  stock_num, stock_name = df_krx_num_name.iloc[idx].tolist()
  fs_url = 'http://comp.fnguide.com/SVO2/ASP/SVD_Finance.asp?pGB=1&gicode=A' + stock_num + '&cID=&MenuYn=Y&ReportGB=&NewMenuID=103&stkGb=701'
  fs_page = requests.get(fs_url)
  fs_tables = pd.read_html(fs_page.text)

  temp_df = fs_tables[2]
  category_name = temp_df.columns[0]

  if category_name in category_list:

    try:
      temp_df = temp_df.set_index(category_name)
      temp_df['Num'] = stock_num
      temp_df['Name'] = stock_name
      cols = temp_df.columns.tolist()
      cols = cols[-2:] + cols[:-2]
      temp_df = temp_df[cols]
      
      if len(asset_df) == 0:
        asset_df = temp_df.loc[['자산']]
        asset_df = asset_df[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]

        equity_df = temp_df.loc[['자본']]
        equity_df = equity_df[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]

      else:
        temp_asset_df = temp_df.loc[['자산']]
        temp_equity_df = temp_df.loc[['자본']]
        asset_df = pd.concat([asset_df, temp_asset_df[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]],  ignore_index = True)
        equity_df = pd.concat([equity_df, temp_equity_df[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]], ignore_index = True)
          
    except:
      idx_list_not_include.append(idx)

"""### 각각 크롤링 (IFRS GAAP 연결, 개별)"""

# IFRS(연결)로 재무제표를 작성한 기업들에 한하여 데이터프레임 제작
idx_list_not_ifrsc = []

for idx in range(len(df_krx_num_name)):
  stock_num, stock_name = df_krx_num_name.iloc[idx].tolist()
  fs_url = 'http://comp.fnguide.com/SVO2/ASP/SVD_Finance.asp?pGB=1&gicode=A' + stock_num + '&cID=&MenuYn=Y&ReportGB=&NewMenuID=103&stkGb=701'
  fs_page = requests.get(fs_url)
  fs_tables = pd.read_html(fs_page.text)

  temp_df = fs_tables[2]

  try:
    temp_df = temp_df.set_index('IFRS(연결)')
    temp_df['Num'] = stock_num
    temp_df['Name'] = stock_name
    cols = temp_df.columns.tolist()
    cols = cols[-2:] + cols[:-2]
    temp_df = temp_df[cols]
    
    if idx == 0:
      asset_df1 = temp_df.loc[['자산']]
      asset_df1 = asset_df1[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]

      equity_df1 = temp_df.loc[['자본']]
      equity_df1 = equity_df1[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]

    else:
      temp_asset_df = temp_df.loc[['자산']]
      temp_equity_df = temp_df.loc[['자본']]
      asset_df1 = pd.concat([asset_df1, temp_asset_df[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]],  ignore_index = True)
      equity_df1 = pd.concat([equity_df1, temp_equity_df[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]], ignore_index = True)
        
  except:
    idx_list_not_ifrsc.append(idx)

idx_list_not_ifrsc

# IFRS(개별)로 재무제표를 작성한 기업들에 한하여 데이터프레임 제작
idx_list_not_ifrs = []

asset_df2 = pd.DataFrame()
equity_df2 = pd.DataFrame()

for idx in idx_list_not_ifrsc:
  stock_num, stock_name = df_krx_num_name.iloc[idx].tolist()
  fs_url = 'http://comp.fnguide.com/SVO2/ASP/SVD_Finance.asp?pGB=1&gicode=A' + stock_num + '&cID=&MenuYn=Y&ReportGB=&NewMenuID=103&stkGb=701'
  fs_page = requests.get(fs_url)
  fs_tables = pd.read_html(fs_page.text)

  temp_df = fs_tables[2]

  try:
    temp_df = temp_df.set_index('IFRS(개별)')
    temp_df['Num'] = stock_num
    temp_df['Name'] = stock_name
    cols = temp_df.columns.tolist()
    cols = cols[-2:] + cols[:-2]
    temp_df = temp_df[cols]
    
    if len(asset_df2) == 0:
      asset_df2 = temp_df.loc[['자산']]
      asset_df2 = asset_df2[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]

      equity_df2 = temp_df.loc[['자본']]
      equity_df2 = equity_df2[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]

    else:
      temp_asset_df = temp_df.loc[['자산']]
      temp_equity_df = temp_df.loc[['자본']]
      asset_df2 = pd.concat([asset_df2, temp_asset_df[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]],  ignore_index = True)
      equity_df2 = pd.concat([equity_df2, temp_equity_df[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]], ignore_index = True)
        
  except:
    idx_list_not_ifrs.append(idx)

len(idx_list_not_ifrs)

# GAAP(연결)로 재무제표를 작성한 기업들에 한하여 데이터프레임 제작

idx_list_not_gaapc = []

asset_df3 = pd.DataFrame()
equity_df3 = pd.DataFrame()

for idx in idx_list_not_ifrs:
  stock_num, stock_name = df_krx_num_name.iloc[idx].tolist()
  fs_url = 'http://comp.fnguide.com/SVO2/ASP/SVD_Finance.asp?pGB=1&gicode=A' + stock_num + '&cID=&MenuYn=Y&ReportGB=&NewMenuID=103&stkGb=701'
  fs_page = requests.get(fs_url)
  fs_tables = pd.read_html(fs_page.text)

  temp_df = fs_tables[2]

  try:
    temp_df = temp_df.set_index('GAAP(연결)')
    temp_df['Num'] = stock_num
    temp_df['Name'] = stock_name
    cols = temp_df.columns.tolist()
    cols = cols[-2:] + cols[:-2]
    temp_df = temp_df[cols]
    
    if len(asset_df3) == 0:
      asset_df3 = temp_df.loc[['자산']]
      asset_df3 = asset_df3[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]

      equity_df3 = temp_df.loc[['자본']]
      equity_df3 = equity_df3[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]

    else:
      temp_asset_df = temp_df.loc[['자산']]
      temp_equity_df = temp_df.loc[['자본']]
      asset_df3 = pd.concat([asset_df3, temp_asset_df[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]],  ignore_index = True)
      equity_df3 = pd.concat([equity_df3, temp_equity_df[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]], ignore_index = True)
        
  except:
    idx_list_not_gaapc.append(idx)

len(idx_list_not_gaapc)

# GAAP(개별)로 재무제표를 작성한 기업들에 한하여 데이터프레임 제작

idx_list_not_gaap = []

asset_df4 = pd.DataFrame()
equity_df4 = pd.DataFrame()

for idx in idx_list_not_gaapc:
  stock_num, stock_name = df_krx_num_name.iloc[idx].tolist()
  fs_url = 'http://comp.fnguide.com/SVO2/ASP/SVD_Finance.asp?pGB=1&gicode=A' + stock_num + '&cID=&MenuYn=Y&ReportGB=&NewMenuID=103&stkGb=701'
  fs_page = requests.get(fs_url)
  fs_tables = pd.read_html(fs_page.text)

  temp_df = fs_tables[2]

  try:
    temp_df = temp_df.set_index('GAAP(개별)')
    temp_df['Num'] = stock_num
    temp_df['Name'] = stock_name
    cols = temp_df.columns.tolist()
    cols = cols[-2:] + cols[:-2]
    temp_df = temp_df[cols]
    
    if len(asset_df4) == 0:
      asset_df4 = temp_df.loc[['자산']]
      asset_df4 = asset_df4[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]

      equity_df4 = temp_df.loc[['자본']]
      equity_df4 = equity_df4[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]

    else:
      temp_asset_df = temp_df.loc[['자산']]
      temp_equity_df = temp_df.loc[['자본']]
      asset_df4 = pd.concat([asset_df4, temp_asset_df[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]],  ignore_index = True)
      equity_df4 = pd.concat([equity_df4, temp_equity_df[['Num', 'Name', '2019/12',	'2020/12',	'2021/12']]], ignore_index = True)
        
  except:
    idx_list_not_gaap.append(idx)

"""## 전체 자료"""

## 사용되지 않는 종목 (2019/12, 2020/12, 2021/12 자료 없는 종목들)
for idx in idx_list_not_include:
  stock_num, stock_name = df_krx_num_name.iloc[idx].tolist()
  fs_url = 'http://comp.fnguide.com/SVO2/ASP/SVD_Finance.asp?pGB=1&gicode=A' + stock_num + '&cID=&MenuYn=Y&ReportGB=&NewMenuID=103&stkGb=701'
  fs_page = requests.get(fs_url)
  fs_tables = pd.read_html(fs_page.text)

  temp_df = fs_tables[2]
  print(temp_df)

asset_df

equity_df

asset_df.to_excel('asset.xlsx')

equity_df.to_excel('equity.xlsx')



"""## 유사도 계산 작업

*   크롤링 끝난 이후 엑셀 파일로 작업
"""

import pandas as pd

asset = pd.read_excel('asset.xlsx', index_col = 0)
equity = pd.read_excel('equity.xlsx', index_col = 0)

asset

equity

"""유사도 계산 식 ($d$의 값이 작을 수록 유사함)

$d(i, j) = \left(1 - \dfrac{asset_i}{asset_j}\right)^2 + \left(1 - \dfrac{equity_i}{equity_j}\right)^2$




"""

#005930 삼성전자로 계산
sample_num = '005930'
asset_i = asset.loc[asset['Num'] == int(sample_num)]['2021/12']
equity_i = equity.loc[equity['Num'] == int(sample_num)]['2021/12']

for idx in range(len(asset)):    
  asset_j = asset.iloc[idx]['2021/12']
  equity_j = equity.iloc[idx]['2021/12']
  compare_num, compare_name, distance = asset.iloc[idx]['Num'], asset.iloc[idx]['Name'], round((1 - asset_i/asset_j)**2 + (1 - equity_i/equity_j)**2, 3)

  if idx == 0:
    similar_df = pd.DataFrame({'sample': sample_num, 'compare_num' : compare_num, 'compare_name' : compare_name, 'distance' : distance})

  else:
    similar_df = pd.concat([similar_df, pd.DataFrame({'sample': sample_num, 'compare_num' : compare_num, 'compare_name' : compare_name, 'distance' : distance})], ignore_index = True)

similar_df = similar_df.sort_values('distance')

similar_df[:20]

#005380 현대차로 계산
sample_num = '005380'
asset_i = asset.loc[asset['Num'] == int(sample_num)]['2021/12']
equity_i = equity.loc[equity['Num'] == int(sample_num)]['2021/12']

for idx in range(len(asset)):    
  asset_j = asset.iloc[idx]['2021/12']
  equity_j = equity.iloc[idx]['2021/12']
  compare_num, compare_name, distance = asset.iloc[idx]['Num'], asset.iloc[idx]['Name'], round((1 - asset_i/asset_j)**2 + (1 - equity_i/equity_j)**2, 3)

  if idx == 0:
    similar_df = pd.DataFrame({'sample': sample_num, 'compare_num' : compare_num, 'compare_name' : compare_name, 'distance' : distance})

  else:
    similar_df = pd.concat([similar_df, pd.DataFrame({'sample': sample_num, 'compare_num' : compare_num, 'compare_name' : compare_name, 'distance' : distance})], ignore_index = True)

similar_df = similar_df.sort_values('distance')

similar_df[:20]