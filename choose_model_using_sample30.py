# -*- coding: utf-8 -*-
"""Choose_Model_Using_Sample30

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SpZtYjpKe9SISUnDcRizum6TxSivk1q3

# Setting
"""

from google.colab import drive

drive.mount('/content/drive')

import os
os.chdir('/content/drive/MyDrive')

import sys

sys.path.append('content/drive/MyDrive')
sys.path

import pandas as pd
import numpy as np
import time
import operator

!pip install pykrx
from pykrx import stock

!pip install dtw-python
import dtw

!pip install pystan~=2.14
!pip install fbprophet

from fbprophet import Prophet

!pip install pmdarima

from statsmodels.tsa.arima_model import ARIMA
import statsmodels.api as sm

import pmdarima as pm
from pmdarima.arima import ndiffs

import pickle as pk

from tqdm import tqdm

pd.options.display.float_format = '{:.2f}'.format

KOSPI_300 = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/kospi_300.csv',  encoding='cp949')
Close_300 = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/Close300.csv')

"""# DL 데이터프레임화 함수"""

with open(r'/content/drive/MyDrive/snapshot/recom_similarity/DL_KOSPI300_30sims.pk', 'rb') as f:
   loadDlData = pk.load(f)

def DL_make_df(idx):
  dl_name_list = loadDlData[list(loadDlData.keys())[idx-1]]
  dl_list = []
  for name in dl_name_list:
    stock_code = str(int((KOSPI_300[KOSPI_300['종목명'] == name]['종목코드'])))
    stock_set = (name, stock_code)
    dl_list.append(stock_set)

  dl_df = pd.DataFrame(dl_list, columns=['종목명', '종목코드'])
  return dl_df, 'dl_sim'

"""# DTW 함수화"""

df_stock = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/Close300.csv')
df_stock = df_stock.columns.values.tolist()
df_stock = df_stock[1:]

stock_code = [ s[:6] for s in df_stock]
stock_name = [ s[7:] for s in df_stock]

d_list={}
for i in range(191):
  d_list[i+1] = (stock_name[i], stock_code[i])

# ## 12~14분 소요 -> drive에 저장
# res = pd.DataFrame()
# res2 = pd.DataFrame()
# for ticker in stock_code:
#     df1 = stock.get_market_ohlcv_by_date(fromdate="20190101", todate="20211231", ticker=ticker)
#     df1 = df1.assign(종목코드=ticker, 종목명=stock.get_market_ticker_name(ticker))
#     res = pd.concat([res, df1], axis=0)
#     time.sleep(1)

#     df2 = stock.get_market_fundamental_by_date(fromdate="20190101", todate="20211231", ticker=ticker)
#     df2 = df2.assign(종목코드=ticker, 종목명=stock.get_market_ticker_name(ticker))
#     res2 = pd.concat([res2, df2], axis=0)
#     time.sleep(1)

# res = res.reset_index()
# res2 = res2.reset_index()

# res.to_pickle("res.pkl")

# res2.to_pickle("res2.pkl")

df_change = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/Change300.csv')

def ftn_dtw_li(idx):
  x_idx = df_change.iloc[:,idx]
  li=[]
  for i in range(1,192): 
    x2 = df_change.iloc[:,i]
    d = dtw.dtw(x_idx, x2, keep_internals=True).distance
    li.append([d,i])

  li = sorted(li,key = lambda x:x[0])

  li_list = []

  for i in range(1,31):
    li_list.append(d_list[li[i][1]])

  li_df = pd.DataFrame(li_list, columns=['종목명', '종목코드'])
  return li, li_df, 'dtw_li'

def ftn_dtw_per(idx):
  data_PER = res2[((idx - 1)*742):(idx*742)]["PER"]

  dtw_per =[]
  n = 1
  for i in range(0,len(res2),742):
    data1 = res2[i:i+742]["PER"]
    d = dtw.dtw(data_PER, data1, keep_internals=True).distance
    dtw_per.append([d, n])
    n += 1

  dtw_per = sorted(dtw_per,key = lambda x:x[0])

  per_list = []
  for i in range(1,31):
    per_list.append(d_list[dtw_per[i][1]])

  per_df = pd.DataFrame(per_list, columns=['종목명', '종목코드'])

  return dtw_per, per_df, 'dtw_per'

def ftn_dtw_pbr(idx):
  data_PBR = res2[((idx - 1)*742):(idx*742)]["PBR"]

  dtw_pbr =[]
  n=1
  for i in range(0,len(res2),742):
    data2 = res2[i:i+742]["PBR"]
    d = dtw.dtw(data_PBR, data2, keep_internals=True).distance
    dtw_pbr.append([d,n])
    n += 1

  dtw_pbr = sorted(dtw_pbr,key = lambda x:x[0])

  pbr_list = []
  for i in range(1,31):
    pbr_list.append(d_list[dtw_pbr[i][1]])

  pbr_df = pd.DataFrame(pbr_list, columns=['종목명', '종목코드'])

  return dtw_pbr, pbr_df, 'dtw_pbr'

def ftn_dtw_total(idx, result_dtw_li = False, result_dtw_per = False, result_dtw_pbr = False):
  total = {}
  for i in range(1,192):
    total[i] = 0
  
  if result_dtw_li == False:
    result_dtw_li, _, _ = ftn_dtw_li(idx)
  
  if result_dtw_per == False:
    result_dtw_per, _, _ = ftn_dtw_per(idx)
  
  if result_dtw_pbr == False:
    result_dtw_pbr, _, _ = ftn_dtw_pbr(idx)

  for i in range(191):
    total[result_dtw_li[i][1]] += i
    total[result_dtw_per[i][1]] += i
    total[result_dtw_pbr[i][1]] += i

  total1 = sorted(total.items(),key = operator.itemgetter(1))

  total_list = []
  for i in range(1,31):
    total_list.append(d_list[total1[i][0]])

  total_df = pd.DataFrame(total_list, columns=['종목명', '종목코드'])
  
  return total_df, 'dtw_total'

res = pd.read_pickle('/content/drive/MyDrive/res.pkl')
res2 = pd.read_pickle('/content/drive/MyDrive/res2.pkl')

"""# Prophet 함수화"""

# input_df = KOSPI_300
# data_df = Close_300
# name_sim = 유사도에 사용한 모델
# total_input = 사용 가능한 자산 
# output_num = 결과 제시 종목 수

def prophet_df(input_df, data_df, name_sim, output_num = 10, total_input = 1000000):
  result_df = pd.DataFrame()
  for i in range(len(input_df)):

    try:
      ticker = str(0)*(6 - len(str(input_df['종목코드'][i]))) + str(input_df['종목코드'][i]) 
      stock_name = str(input_df['종목명'][i])
      find_column_name = ticker + '_' + stock_name
      output_df = pd.DataFrame({'유사도':[name_sim], '수익률':['prophet'], 
                                '종목코드':[ticker], '종목명':[stock_name]})
      
      df = pd.DataFrame()
      df['ds'] = pd.to_datetime(data_df['Date'], format = '%Y-%m-%d')
      df['y'] = data_df[find_column_name]
       
      m = Prophet(daily_seasonality=True)
      m.fit(df)
       
      future = m.make_future_dataframe(periods=8) 
      forecast = m.predict(future)

      forecast_val = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']][-1:]
      output_df['현재 종가'] = float(df['y'][-1:])
      output_df['예상 종가'] = float(forecast_val['yhat'])
      output_df['최대 구매 수량'] = total_input//float(df['y'][-1:])
      output_df['남은 잔액'] = total_input - total_input//float(df['y'][-1:]) * float(df['y'][-1:])

      if total_input//float(df['y'][-1:]) == 0:
        output_df['예상 총 수익'] = 0
        output_df['예상 순이익'] = 0
        output_df['예상 수익률'] = 0
       
      elif total_input//float(df['y'][-1:]) >= 1:
        output_df['예상 총 수익'] = total_input//float(df['y'][-1:]) * float(forecast_val['yhat'])
        output_df['예상 순이익'] = total_input//float(df['y'][-1:]) * (float(forecast_val['yhat']) -  float(df['y'][-1:]))
        output_df['예상 수익률'] = ((float(forecast_val['yhat']) -  float(df['y'][-1:])) / float(df['y'][-1:])) * 100
        output_df['자산 예상 증가율'] = ((total_input//float(df['y'][-1:]) * (float(forecast_val['yhat']) -  float(df['y'][-1:]))) / total_input) * 100
       
      result_df = pd.concat([result_df, output_df], axis=0)
      time.sleep(1)

    except:
     pass
    
  top_result = result_df.sort_values('예상 순이익', ascending = False)[:output_num]
  top_result.set_index(keys=[[i for i in range(output_num)]], inplace = True, drop = False)
  return top_result

"""# Arima 함수화"""

# input_df = KOSPI_300
# data_df = Close_300
# name_sim = 유사도에 사용한 모델
# total_input = 사용 가능한 자산 
# output_num = 결과 제시 종목 수

def arima_df(input_df, data_df, name_sim, output_num = 10, total_input = 1000000):
  result_df = pd.DataFrame()
  for i in range(len(input_df)):

    try:
      ticker = str(0)*(6 - len(str(input_df['종목코드'][i]))) + str(input_df['종목코드'][i]) 
      stock_name = str(input_df['종목명'][i])
      find_column_name = ticker + '_' + stock_name
      output_df = pd.DataFrame({'유사도':[name_sim], '수익률':['arima'], 
                                '종목코드':[ticker], '종목명':[stock_name]})
      
      y_train = data_df[find_column_name]
       
      kpss_diffs = ndiffs(y_train, alpha=0.05, test='kpss', max_d=6)
      adf_diffs = ndiffs(y_train, alpha=0.05, test='adf', max_d=6)
      n_diffs = max(adf_diffs, kpss_diffs)

      model = pm.auto_arima(y = y_train, d = n_diffs, seasonal = True, stepwise = False, trace = False)
      forecast_val = model.predict(n_periods = 7)[-1:]

      output_df['현재 종가'] = float(y_train[-1:])
      output_df['예상 종가'] = float(forecast_val)
      output_df['최대 구매 수량'] = total_input//float(y_train[-1:])
      output_df['남은 잔액'] = total_input - total_input//float(y_train[-1:]) * float(y_train[-1:])

      if total_input//float(y_train[-1:]) == 0:
        output_df['예상 총 수익'] = 0
        output_df['예상 순이익'] = 0
        output_df['예상 수익률'] = 0
       
      elif total_input//float(y_train[-1:]) >= 1:
        output_df['예상 총 수익'] = total_input//float(y_train[-1:]) * float(forecast_val)
        output_df['예상 순이익'] = total_input//float(y_train[-1:]) * (float(forecast_val) -  float(y_train[-1:]))
        output_df['예상 수익률'] = ((float(forecast_val) -  float(y_train[-1:])) / float(y_train[-1:])) * 100
        output_df['자산 예상 증가율'] = ((total_input//float(y_train[-1:]) * (float(forecast_val) -  float(y_train[-1:]))) / total_input) * 100
       
      result_df = pd.concat([result_df, output_df], axis=0)
      time.sleep(1)

    except:
     pass
    
  top_result = result_df.sort_values('예상 순이익', ascending = False)[:output_num]
  top_result.set_index(keys=[[i for i in range(output_num)]], inplace = True, drop = False)
  return top_result

"""# Compare 함수화"""

def compare(result, answer, output_num = 10, total_input = 1000000):
  compare_df = pd.DataFrame()
  each_df = result[['종목코드', '종목명', '예상 종가', '예상 순이익', '예상 수익률', '자산 예상 증가율']]

  for i in range(len(each_df)):
    idx_name = str(result['종목코드'][i]) + '_' + str(result['종목명'][i])

    each_df = pd.DataFrame({'유사도':[result['유사도'][i]], '수익률':[result['수익률'][i]], 
                            '종목코드':[result['종목코드'][i]], '종목명':[result['종목명'][i]]})

    each_df['예상 종가'] = result['예상 종가'][i]
    each_df['실제 종가'] = answer[idx_name].tolist()[0]

    each_df['예상 순이익'] = result['예상 순이익'][i]
    each_df['실제 순이익'] = result['최대 구매 수량'][i] * (each_df['실제 종가'] - result['현재 종가'][i])  

    each_df['예상 수익률'] = result['예상 수익률'][i]
    each_df['실제 수익률'] = ((each_df['실제 종가'] - result['현재 종가'][i]) / result['현재 종가'][i]) * 100  

    each_df['자산 예상 증가율'] = result['자산 예상 증가율'][i]
    each_df['자산 실제 증가율'] = ((each_df['실제 종가'] - result['현재 종가'][i]) / total_input) * 100  

    compare_df = pd.concat([compare_df,  each_df], axis=0)
    time.sleep(1)

  compare_df.set_index(keys=[[i for i in range(output_num)]], inplace = True, drop = False)
  return compare_df

"""# 종합 비교 함수"""

## 한 종목당 30분 소요
def overall_compare(idx):
  dtw_li, dtw_li_df, dtw_li_name = ftn_dtw_li(idx)
  dtw_per, dtw_per_df, dtw_per_name = ftn_dtw_per(idx)
  dtw_pbr, dtw_pbr_df, dtw_pbr_name = ftn_dtw_pbr(idx)
  dtw_total_df, dtw_total_name = ftn_dtw_total(idx, dtw_li, dtw_per, dtw_pbr)
  dl_sim_df, dl_sim_name = DL_make_df(idx)

  cp_dtw_li_pp = compare(prophet_df(dtw_li_df, Close_300[:(train_idx+1)], dtw_li_name, 1), answer_300, 1)
  cp_dtw_per_pp = compare(prophet_df(dtw_per_df, Close_300[:(train_idx+1)], dtw_per_name, 1), answer_300, 1)
  cp_dtw_pbr_pp = compare(prophet_df(dtw_pbr_df, Close_300[:(train_idx+1)], dtw_pbr_name, 1), answer_300, 1)
  cp_dtw_total_pp = compare(prophet_df(dtw_total_df, Close_300[:(train_idx+1)], dtw_total_name, 1), answer_300, 1)
  cp_dl_sim_pp = compare(prophet_df(dl_sim_df, Close_300[:(train_idx+1)], dl_sim_name, 1), answer_300, 1)

  cp_dtw_li_arm = compare(arima_df(dtw_li_df, Close_300[:(train_idx+1)], dtw_li_name, 1), answer_300, 1)
  cp_dtw_per_arm = compare(arima_df(dtw_per_df, Close_300[:(train_idx+1)], dtw_per_name, 1), answer_300, 1)
  cp_dtw_pbr_arm = compare(arima_df(dtw_pbr_df, Close_300[:(train_idx+1)], dtw_pbr_name, 1), answer_300, 1)
  cp_dtw_total_arm = compare(arima_df(dtw_total_df, Close_300[:(train_idx+1)], dtw_total_name, 1), answer_300, 1)
  cp_dl_sim_arm = compare(arima_df(dl_sim_df, Close_300[:(train_idx+1)], dl_sim_name, 1), answer_300, 1)
  
  return pd.concat([cp_dtw_li_pp, cp_dtw_per_pp, cp_dtw_pbr_pp, cp_dtw_total_pp, cp_dl_sim_pp, 
                    cp_dtw_li_arm, cp_dtw_per_arm, cp_dtw_pbr_arm, cp_dtw_total_arm, cp_dl_sim_arm], axis = 0)

"""# 모델 최종 선정"""

train_idx = Close_300.index[Close_300['Date'] == '2021-12-30'].tolist()[0]
answer_index = Close_300.index[Close_300['Date'] == '2022-01-07'].tolist()[0]
answer_300 = Close_300[answer_index:answer_index+1]

# 점수를 기록할 딕셔너리
model_dict = {'dtw_li_prophet' : 0, 'dtw_per_prophet' : 0, 'dtw_pbr_prophet' : 0,
              'dtw_total_prophet' : 0, 'dl_sim_prophet' : 0,
              'dtw_li_arima' : 0, 'dtw_per_arima' : 0, 'dtw_pbr_arima' : 0,
              'dtw_total_arima' : 0, 'dl_sim_arima' : 0,}

import random

idx_list = [num for num in range(2, 192)]

random.seed(1)

random_out = random.sample(idx_list, 30)
random_out

#1종목 당 약 45분 소요 -> 시간 상 랜덤으로 몇 개만 해봐야 할듯. 일단 30개

for k in tqdm(random_out):
  print(k)
  overall_df = overall_compare(k)
  best_result = overall_df.sort_values('실제 순이익', ascending = False)[:1]

  model_name = best_result['유사도'] + '_' + best_result['수익률']
  model_dict[model_name[0]] += 1
  print(model_name)

print(model_dict)