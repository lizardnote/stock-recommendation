# -*- coding: utf-8 -*-
"""Compare_Model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nggr_xx4gwJgiDJFIM8j4O0_M-GS-ku9
"""

from google.colab import drive

drive.mount('/content/drive')

import os
os.chdir('/content/drive/MyDrive')

import sys

sys.path.append('content/drive/MyDrive')
sys.path

import pandas as pd
import numpy as np
import time

KOSPI_300 = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/kospi_300.csv',  encoding='cp949')
Close_300 = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/Close300.csv')

!pip install pykrx
from pykrx import stock

"""# 유사도 (DTW)"""

df_stock = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/Close300.csv')

stock_code = [ s[:6] for s in df_stock]
stock_name = [ s[7:] for s in df_stock]
#stock_name

d_list={}
for i in range(191):
  d_list[i+1] = (stock_name[i], stock_code[i])

df_stock = df_stock.columns.values.tolist()
df_stock = df_stock[1:]

stock_code = [ s[:6] for s in df_stock]

#stock_code = stock.get_market_ticker_list() # 현재일자 기준 가장 가까운 영업일의 코스피 상장종목 리스트
res = pd.DataFrame()
for ticker in stock_code:
    df = stock.get_market_ohlcv_by_date(fromdate="20190101", todate="20211231", ticker=ticker)
    df = df.assign(종목코드=ticker, 종목명=stock.get_market_ticker_name(ticker))
    res = pd.concat([res, df], axis=0)
    time.sleep(1)
res = res.reset_index()

#5분 소요

#stock_code = stock.get_market_ticker_list() # 현재일자 기준 가장 가까운 영업일의 코스피 상장종목 리스트
res2 = pd.DataFrame()
for ticker in stock_code:
    df = stock.get_market_fundamental_by_date(fromdate="20190101", todate="20211231", ticker=ticker)
    df = df.assign(종목코드=ticker, 종목명=stock.get_market_ticker_name(ticker))
    res2 = pd.concat([res2, df], axis=0)
    time.sleep(1)
res2 = res2.reset_index()

df_change = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/Change300.csv')

"""1번째 종목(BGF리테일)과 유사한 종목 찾기"""

!pip install dtw-python
import dtw

x1 = df_change.iloc[:,1]

li=[]
for i in range(1,192): #x1제외
  x2 = df_change.iloc[:,i]
  d = dtw.dtw(x1,x2,keep_internals=True).distance
  li.append([d,i])

li = sorted(li,key = lambda x:x[0])

li_list = []

for i in range(1,31):
  li_list.append(d_list[li[i][1]])

li_df = pd.DataFrame(li_list, columns=['종목명', '종목코드'])
print(li_df)

total = {}
for i in range(1,192):
  total[i] = 0

for i in range(191):
  total[li[i][1]] = i



data1 = res2[0:742]["PER"]

dtw_per =[]
n=1
for i in range(0,len(res2),742):
  data2 = res2[i:i+742]["PER"]
  d = dtw.dtw(data1,data2,keep_internals=True).distance
  dtw_per.append([d,n])
  n += 1

dtw_per = sorted(dtw_per,key = lambda x:x[0])

per_list = []
for i in range(1,31):
  per_list.append(d_list[dtw_per[i][1]])

per_df = pd.DataFrame(per_list, columns=['종목명', '종목코드'])
print(per_df)

for i in range(191):
  total[dtw_per[i][1]] += i



data1 = res2[0:742]["PBR"]


dtw_pbr =[]
n=1
for i in range(0,len(res2),742):
  data2 = res2[i:i+742]["PBR"]
  d = dtw.dtw(data1,data2,keep_internals=True).distance
  dtw_pbr.append([d,n])
  n += 1

dtw_pbr = sorted(dtw_pbr,key = lambda x:x[0])

pbr_list = []
for i in range(1,31):
  pbr_list.append(d_list[dtw_pbr[i][1]])

pbr_df = pd.DataFrame(pbr_list, columns=['종목명', '종목코드'])
print(pbr_df)

for i in range(191):
  total[dtw_pbr[i][1]] += i



import operator 
total1 = sorted(total.items(),key = operator.itemgetter(1))

total1

total_list = []
for i in range(1,31):
  total_list.append(d_list[total1[i][0]])

total_df = pd.DataFrame(total_list, columns=['종목명', '종목코드'])
print(total_df)



"""## Prophet을 이용한 주식 가격 예측

코드 활용 출처


*   시계열 예측 패키지 Prophet 소개 (https://hyperconnect.github.io/2020/03/09/prophet-package.html)
*   시계열 예측을 위한 Facebook Prophet 사용하기 (https://zzsza.github.io/data/2019/02/06/prophet/)
*   Prophet을 이용한 주가 예측 (https://skyeong.net/290)
"""

!pip install pystan~=2.14
!pip install fbprophet

from fbprophet import Prophet

pd.options.display.float_format = '{:.2f}'.format

"""사용 가능 자산 증가율

$\dfrac{\mbox{순 이익}}{total\,\,input} \cdot 100 (\%) $

수익률

$\dfrac{y_1 - y_0}{y_0} * 100(\%)$
"""

# input_df = KOSPI_300
# data_df = Close_300
# total_input = 사용 가능한 자산 

def prophet_df(input_df, data_df, total_input = 1000000):
  result_df = pd.DataFrame()
  for i in range(len(input_df)):

    try:
      ticker = str(0)*(6 - len(str(input_df['종목코드'][i]))) + str(input_df['종목코드'][i]) 
      stock_name = str(input_df['종목명'][i])
      find_column_name = ticker + '_' + stock_name
      output_df = pd.DataFrame({'종목코드':[ticker], '종목명':[stock_name]})
      
      df = pd.DataFrame()
      df['ds'] = pd.to_datetime(data_df['Date'], format = '%Y-%m-%d')
      df['y'] = data_df[find_column_name]
       
      m = Prophet(daily_seasonality=True)
      m.fit(df)
       
      future = m.make_future_dataframe(periods=8) 
      forecast = m.predict(future)

      forecast_val = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']][-1:]
      output_df['현재 종가'] = float(df['y'][-1:])
      output_df['예상 종가'] = float(forecast_val['yhat'])
      output_df['최대 구매 수량'] = total_input//float(df['y'][-1:])
      output_df['남은 잔액'] = total_input - total_input//float(df['y'][-1:]) * float(df['y'][-1:])

      if total_input//float(df['y'][-1:]) == 0:
        output_df['예상 총 수익'] = 0
        output_df['예상 순이익'] = 0
        output_df['예상 수익률'] = 0
       
      elif total_input//float(df['y'][-1:]) >= 1:
        output_df['예상 총 수익'] = total_input//float(df['y'][-1:]) * float(forecast_val['yhat'])
        output_df['예상 순이익'] = total_input//float(df['y'][-1:]) * (float(forecast_val['yhat']) -  float(df['y'][-1:]))
        output_df['예상 수익률'] = ((float(forecast_val['yhat']) -  float(df['y'][-1:])) / float(df['y'][-1:])) * 100
        output_df['자산 예상 증가율'] = ((total_input//float(df['y'][-1:]) * (float(forecast_val['yhat']) -  float(df['y'][-1:]))) / total_input) * 100
       
      result_df = pd.concat([result_df, output_df], axis=0)
      time.sleep(1)

    except:
     pass
    
  top10_result = result_df.sort_values('예상 순이익', ascending = False)[:10]
  top10_result.set_index(keys=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], inplace = True, drop = False)
  return top10_result

train_idx = Close_300.index[Close_300['Date'] == '2021-12-30'].tolist()[0]

answer_index = Close_300.index[Close_300['Date'] == '2022-01-07'].tolist()[0]

answer_300 = Close_300[answer_index:answer_index+1]

def compare(result, answer, total_input):
  compare_df = pd.DataFrame()
  each_df = result[['종목코드', '종목명', '예상 종가', '예상 순이익', '예상 수익률', '자산 예상 증가율']]

  for i in range(len(each_df)):
    idx_name = str(result['종목코드'][i]) + '_' + str(result['종목명'][i])

    each_df = pd.DataFrame({'종목코드':[result['종목코드'][i]], '종목명':[result['종목명'][i]]})

    each_df['예상 종가'] = result['예상 종가'][i]
    each_df['실제 종가'] = answer[idx_name].tolist()[0]

    each_df['예상 순이익'] = result['예상 순이익'][i]
    each_df['실제 순이익'] = result['최대 구매 수량'][i] * (each_df['실제 종가'] - result['현재 종가'][i])  

    each_df['예상 수익률'] = result['예상 수익률'][i]
    each_df['실제 수익률'] = ((each_df['실제 종가'] - result['현재 종가'][i]) / result['현재 종가'][i]) * 100  

    each_df['자산 예상 증가율'] = result['자산 예상 증가율'][i]
    each_df['자산 실제 증가율'] = ((each_df['실제 종가'] - result['현재 종가'][i]) / total_input) * 100  

    compare_df = pd.concat([compare_df,  each_df], axis=0)
    time.sleep(1)

  compare_df.set_index(keys=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], inplace = True, drop = False)
  return compare_df

"""### DTW 종가변화량 (li_ph_result, li_ph_compare)"""

li_ph_result = prophet_df(li_df, Close_300[:(train_idx+1)], 1000000) # 4분 소요
li_ph_compare = compare(li_ph_result, answer_300, 1000000) #10초 소요

li_ph_result

li_ph_compare

"""### DTW PER (per_ph_result, per_ph_compare)"""

per_ph_result = prophet_df(per_df, Close_300[:(train_idx+1)], 1000000) # 4분 소요
per_ph_compare = compare(per_ph_result, answer_300, 1000000) #10초 소요

per_ph_result

per_ph_compare

"""### DTW PBR (pbr_ph_result, pbr_ph_compare)"""

pbr_ph_result = prophet_df(pbr_df, Close_300[:(train_idx+1)], 1000000) # 4분 소요
pbr_ph_compare = compare(pbr_ph_result, answer_300, 1000000) #10초 소요

pbr_ph_result

pbr_ph_compare

"""### DTW Total (total_ph_result, total_ph_compare)"""

total_ph_result = prophet_df(total_df, Close_300[:(train_idx+1)], 1000000) # 4분 소요
total_ph_compare = compare(total_ph_result, answer_300, 1000000) #10초 소요

total_ph_result

total_ph_compare

"""## AIRMA 모형을 이용한 주식 가격 예측

출처 https://assaeunji.github.io/data%20analysis/2021-09-25-arimastock/
"""

!pip install pmdarima

from statsmodels.tsa.arima_model import ARIMA
import statsmodels.api as sm

import pmdarima as pm
from pmdarima.arima import ndiffs

def arima_df(input_df, data_df, total_input = 1000000):
  result_df = pd.DataFrame()
  for i in range(len(input_df)):

    try:
      ticker = str(0)*(6 - len(str(input_df['종목코드'][i]))) + str(input_df['종목코드'][i]) 
      stock_name = str(input_df['종목명'][i])
      find_column_name = ticker + '_' + stock_name
      output_df = pd.DataFrame({'종목코드':[ticker], '종목명':[stock_name]})
      
      y_train = data_df[find_column_name]
       
      kpss_diffs = ndiffs(y_train, alpha=0.05, test='kpss', max_d=6)
      adf_diffs = ndiffs(y_train, alpha=0.05, test='adf', max_d=6)
      n_diffs = max(adf_diffs, kpss_diffs)

      model = pm.auto_arima(y = y_train, d = n_diffs, seasonal = True, stepwise = False, trace = False)
      forecast_val = model.predict(n_periods = 7)[-1:]

      output_df['현재 종가'] = float(y_train[-1:])
      output_df['예상 종가'] = float(forecast_val)
      output_df['최대 구매 수량'] = total_input//float(y_train[-1:])
      output_df['남은 잔액'] = total_input - total_input//float(y_train[-1:]) * float(y_train[-1:])

      if total_input//float(y_train[-1:]) == 0:
        output_df['예상 총 수익'] = 0
        output_df['예상 순이익'] = 0
        output_df['예상 수익률'] = 0
       
      elif total_input//float(y_train[-1:]) >= 1:
        output_df['예상 총 수익'] = total_input//float(y_train[-1:]) * float(forecast_val)
        output_df['예상 순이익'] = total_input//float(y_train[-1:]) * (float(forecast_val) -  float(y_train[-1:]))
        output_df['예상 수익률'] = ((float(forecast_val) -  float(y_train[-1:])) / float(y_train[-1:])) * 100
        output_df['자산 예상 증가율'] = ((total_input//float(y_train[-1:]) * (float(forecast_val) -  float(y_train[-1:]))) / total_input) * 100
       
      result_df = pd.concat([result_df, output_df], axis=0)
      time.sleep(1)

    except:
     pass
    
  top10_result = result_df.sort_values('예상 순이익', ascending = False)[:10]
  top10_result.set_index(keys=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], inplace = True, drop = False)
  return top10_result

"""### DTW 종가변화량 (li_ari_result, li_ari_compare)"""

li_ari_result = arima_df(li_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
li_ari_compare = compare(li_ari_result, answer_300, 1000000)

li_ari_result

li_ari_compare

"""### DTW PER (per_ari_result, per_ari_compare)"""

per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
per_ari_compare = compare(per_ari_result, answer_300, 1000000)

per_ari_result

per_ari_compare

"""### DTW PBR (pbr_ari_result, pbr_ari_compare)"""

pbr_ari_result = arima_df(pbr_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
pbr_ari_compare = compare(pbr_ari_result, answer_300, 1000000)

pbr_ari_result

pbr_ari_compare

"""### DTW Total (total_ari_result, total_ari_compare)"""

total_ari_result = arima_df(total_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
total_ari_compare = compare(total_ari_result, answer_300, 1000000)

total_ari_result

total_ari_compare

"""# DL similarity"""

import pandas as pd
import numpy as np

from pprint import pprint
import torch

mydata = os.listdir('data/mydata')

users = []
for user in mydata:
  user_log = pd.read_csv(f'data/mydata/{user}')
  users.append(user_log)

names = np.load('data/stock/dataset/DL/train300.npz', allow_pickle=True)['names']

len(names)

# torch 기반 모델

from src.BPR.model_architecture import EmbRec

emb_dim = 64
device = "cuda" if torch.cuda.is_available() else 'cpu'

device

# TODO: 여기에 해당 모델들 불러오기
model = EmbRec(len(names), emb_dim).to(device)
model.load_state_dict(torch.load("snapshot/model/bpr300.pt", map_location="cpu"))

search_names = users[55]['Stock_name'].to_numpy()
search_names = np.unique(search_names)

search_names = np.array(['BGF리테일'])
search_names

user_records = dict()
user_recomends = dict()
for user_idx, user in enumerate(users):
  user_id = mydata[user_idx].split('.')[0]
  search_names = user['Stock_name'].to_numpy()
  search_names = np.unique(search_names)
  recom_scores = dict()
  for search_name in search_names:
    if len(np.argwhere(names==search_name)) == 0:
      continue
    idx = np.argwhere(names==search_name)[0]

    with torch.no_grad():
        embs = model.embedding.weight.data
        candidates = torch.matmul(embs, embs.T)[idx]
        recom_score, recom_label = torch.topk(candidates, 30, sorted=True)
    top_n = recom_label.detach().cpu().numpy()
    for top_idx, top_k in enumerate(top_n[0]):        
      if names[top_k] == search_name:
        continue
      if names[top_k] in recom_scores.keys():
        recom_scores[names[top_k]] += recom_score[0][top_idx].detach().cpu().numpy().item()
      else:
        recom_scores[names[top_k]] = recom_score[0][top_idx].detach().cpu().numpy().item()
  user_records[user_id] = recom_scores

  user_comp = np.array(list(recom_scores.keys()))
  user_score = np.array(list(recom_scores.values()))
  user_recomends[user_id] = user_comp[np.argsort(user_score)[::-1][:30]].tolist()

dl_name_list = user_recomends[list(user_recomends.keys())[0]]

dl_list = []
for name in dl_name_list:
  stock_code = str(int((KOSPI_300[KOSPI_300['종목명'] == name]['종목코드'])))
  stock_set = (name, stock_code)
  dl_list.append(stock_set)

dl_df = pd.DataFrame(dl_list, columns=['종목명', '종목코드'])
print(dl_df)

"""### Prophet DL similarity (dl_ph_result, dl_ph_compare)"""

dl_ph_result = prophet_df(dl_df, Close_300[:(train_idx+1)], 1000000) # 3분 소요
dl_ph_compare = compare(dl_ph_result, answer_300, 1000000)

dl_ph_result

dl_ph_compare

"""### Arima DL similarity (dl_ari_result, dl_ari_compare)"""

dl_ari_result = arima_df(dl_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
dl_ari_compare = compare(dl_ari_result, answer_300, 1000000)

dl_ari_result

dl_ari_compare

