# -*- coding: utf-8 -*-
"""Performance_DTW_PER_Arima_Using_Top1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qaLwdlTnco0ASO1lP0R07SUduobXm-UF
"""

from google.colab import drive

drive.mount('/content/drive')

import os
os.chdir('/content/drive/MyDrive')

import sys

sys.path.append('content/drive/MyDrive')
sys.path

import pandas as pd
import numpy as np
import time

KOSPI_300 = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/kospi_300.csv',  encoding='cp949')
Close_300 = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/Close300.csv')

!pip install pykrx
from pykrx import stock

"""유사도"""

df_stock = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/Close300.csv')

stock_code = [ s[:6] for s in df_stock]
stock_name = [ s[7:] for s in df_stock]
#stock_name

d_list={}
for i in range(191):
  d_list[i+1] = (stock_name[i], stock_code[i])

df_stock = df_stock.columns.values.tolist()
df_stock = df_stock[1:]

stock_code = [ s[:6] for s in df_stock]

#stock_code = stock.get_market_ticker_list() # 현재일자 기준 가장 가까운 영업일의 코스피 상장종목 리스트
res = pd.DataFrame()
for ticker in stock_code:
    df = stock.get_market_ohlcv_by_date(fromdate="20190101", todate="20211231", ticker=ticker)
    df = df.assign(종목코드=ticker, 종목명=stock.get_market_ticker_name(ticker))
    res = pd.concat([res, df], axis=0)
    time.sleep(1)
res = res.reset_index()

#20221106 실행 기준 7분 39초 소요

#stock_code = stock.get_market_ticker_list() # 현재일자 기준 가장 가까운 영업일의 코스피 상장종목 리스트
res2 = pd.DataFrame()
for ticker in stock_code:
    df = stock.get_market_fundamental_by_date(fromdate="20190101", todate="20211231", ticker=ticker)
    df = df.assign(종목코드=ticker, 종목명=stock.get_market_ticker_name(ticker))
    res2 = pd.concat([res2, df], axis=0)
    time.sleep(1)
res2 = res2.reset_index()

#20221106 실행 기준 7분 30초 소요

df_change = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/Change300.csv')

!pip install dtw-python
import dtw

Close_300

def dtw_per_df(data1):
  dtw_per =[]
  n=1
  for i in range(0,len(res2),742):
    data2 = res2[i:i+742]["PER"]
    d = dtw.dtw(data1,data2,keep_internals=True).distance
    dtw_per.append([d,n])
    n += 1

  dtw_per = sorted(dtw_per,key = lambda x:x[0])
  per_list = []
  for i in range(1,31):
    per_list.append(d_list[dtw_per[i][1]])

  per_df = pd.DataFrame(per_list, columns=['종목명', '종목코드'])
  return per_df

!pip install pmdarima

from statsmodels.tsa.arima_model import ARIMA
import statsmodels.api as sm

import pmdarima as pm
from pmdarima.arima import ndiffs

def arima_df(input_df, data_df, total_input = 1000000):
  result_df = pd.DataFrame()
  for i in range(len(input_df)):

    try:
      ticker = str(0)*(6 - len(str(input_df['종목코드'][i]))) + str(input_df['종목코드'][i]) 
      stock_name = str(input_df['종목명'][i])
      find_column_name = ticker + '_' + stock_name
      output_df = pd.DataFrame({'종목코드':[ticker], '종목명':[stock_name]})
      
      y_train = data_df[find_column_name]
       
      kpss_diffs = ndiffs(y_train, alpha=0.05, test='kpss', max_d=6)
      adf_diffs = ndiffs(y_train, alpha=0.05, test='adf', max_d=6)
      n_diffs = max(adf_diffs, kpss_diffs)

      model = pm.auto_arima(y = y_train, d = n_diffs, seasonal = True, stepwise = False, trace = False)
      forecast_val = model.predict(n_periods = 7)[-1:]

      output_df['현재 종가'] = float(y_train[-1:])
      output_df['예상 종가'] = float(forecast_val)
      output_df['최대 구매 수량'] = total_input//float(y_train[-1:])
      output_df['남은 잔액'] = total_input - total_input//float(y_train[-1:]) * float(y_train[-1:])

      if total_input//float(y_train[-1:]) == 0:
        output_df['예상 총 수익'] = 0
        output_df['예상 순이익'] = 0
        output_df['예상 수익률'] = 0
       
      elif total_input//float(y_train[-1:]) >= 1:
        output_df['예상 총 수익'] = total_input//float(y_train[-1:]) * float(forecast_val)
        output_df['예상 순이익'] = total_input//float(y_train[-1:]) * (float(forecast_val) -  float(y_train[-1:]))
        output_df['예상 수익률'] = ((float(forecast_val) -  float(y_train[-1:])) / float(y_train[-1:])) * 100
        output_df['자산 예상 증가율'] = ((total_input//float(y_train[-1:]) * (float(forecast_val) -  float(y_train[-1:]))) / total_input) * 100
       
      result_df = pd.concat([result_df, output_df], axis=0)
      time.sleep(1)

    except:
     pass
    
  top10_result = result_df.sort_values('예상 순이익', ascending = False)[:10]
  top10_result.set_index(keys=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], inplace = True, drop = False)
  return top10_result

train_idx = Close_300.index[Close_300['Date'] == '2021-12-30'].tolist()[0]

answer_index = Close_300.index[Close_300['Date'] == '2022-01-07'].tolist()[0]

answer_300 = Close_300[answer_index:answer_index+1]

def compare(result, answer, total_input):
  compare_df = pd.DataFrame()
  each_df = result[['종목코드', '종목명', '예상 종가', '예상 순이익', '예상 수익률', '자산 예상 증가율']]

  for i in range(len(each_df)):
    idx_name = str(result['종목코드'][i]) + '_' + str(result['종목명'][i])

    each_df = pd.DataFrame({'종목코드':[result['종목코드'][i]], '종목명':[result['종목명'][i]]})

    each_df['예상 종가'] = result['예상 종가'][i]
    each_df['실제 종가'] = answer[idx_name].tolist()[0]

    each_df['예상 순이익'] = result['예상 순이익'][i]
    each_df['실제 순이익'] = result['최대 구매 수량'][i] * (each_df['실제 종가'] - result['현재 종가'][i])  

    each_df['예상 수익률'] = result['예상 수익률'][i]
    each_df['실제 수익률'] = ((each_df['실제 종가'] - result['현재 종가'][i]) / result['현재 종가'][i]) * 100  

    each_df['자산 예상 증가율'] = result['자산 예상 증가율'][i]
    each_df['자산 실제 증가율'] = ((each_df['실제 종가'] - result['현재 종가'][i]) / total_input) * 100  

    compare_df = pd.concat([compare_df,  each_df], axis=0)
    time.sleep(1)

  compare_df.set_index(keys=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], inplace = True, drop = False)
  return compare_df

#192개 종목을 16파트로 나누어 계산

#1) 0~11 => 5 
# 20221108 실행 기준 60분 소요

cnt = 0
for idx in range(0,742*12,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  
print(cnt)

total = 0 
total+= cnt
print(total)

#2) 12~23 => 8
# 20221108 실행 기준 60분 소요

cnt = 0
for idx in range(742*12,742*24,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  

print(cnt)
total += cnt
print(total)

#3) 24~35  => 3
# 20221108 실행 기준 60분 소요

cnt = 0
for idx in range(742*24,742*36,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  

print(cnt)
total += cnt
print(total)

#4) 36~47 => 3
# 20221108 실행 기준 60분 소요

cnt = 0
for idx in range(742*36,742*48,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  

print(cnt)
total += cnt
print(total)

total = 5 + 8 + 3 + 3

#5) 48~59 => 4
# 20221108 실행 기준 60분 소요

cnt = 0
for idx in range(742*48,742*60,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  

print(cnt)
total += cnt
print(total)

#6) 60~71 => 8
# 20221108 실행 기준 60분 소요

cnt = 0
for idx in range(742*60,742*72,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  

print(cnt)
total += cnt
print(total)

#7) 72~83 => 4
# 20221108 실행 기준 70분 소요

cnt = 0
for idx in range(742*72,742*84,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  

print(cnt)
total += cnt
print(total)

#8) 84~95 => 4

cnt = 0
for idx in range(742*84,742*96,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  

print(cnt)
total += cnt
print(total)

#9) 96~107 => 6

total = 39

cnt = 0
for idx in range(742*96,742*108,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  

print(cnt)
total += cnt
print(total)

#10) 108~119 => 2

cnt = 0
for idx in range(742*108,742*120,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  

print(cnt)
total += cnt
print(total)

#11) 120~131 =>

cnt = 0
for idx in range(742*120,742*132,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  

print(cnt)
total += cnt
print(total)

#12) 132~143 => 7

total = 50

cnt = 0
for idx in range(742*132,742*144,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  

print(cnt)
total += cnt
print(total)

#13) 144~155 => 3

cnt = 0
for idx in range(742*144,742*156,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  

print(cnt)
total += cnt
print(total)

#14) 156~167 => 1

cnt = 0
for idx in range(742*156,742*168,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  

print(cnt)
total += cnt
print(total)

#15) 168~179 => 5

cnt = 0
for idx in range(742*168,742*180,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  

print(cnt)
total += cnt
print(total)

#16) 180~190 => 3

cnt = 0
for idx in range(742*180,742*191,742):
  data1 = res2[idx:idx+742]["PER"]
  per_df = dtw_per_df(data1)
  per_ari_result = arima_df(per_df, Close_300[:(train_idx+1)], 1000000) # 6분 소요
  per_ari_compare = compare(per_ari_result, answer_300, 1000000)
  for i in range(1):
    if per_ari_compare["자산 실제 증가율"][i]>0 and per_ari_compare["자산 예상 증가율"][i] > 0:
      cnt += 1
    elif per_ari_compare["자산 실제 증가율"][i]<0 and per_ari_compare["자산 예상 증가율"][i] < 0:
      cnt += 1
  

print(cnt)
total += cnt
print(total)

total/191*100