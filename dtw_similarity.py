# -*- coding: utf-8 -*-
"""DTW_Similarity

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1526zX_YBdvHGIITmdL5p3tVxaHKFaA_Q

# data load
"""

!pip install pykrx
from pykrx import stock

from google.colab import drive

drive.mount('/content/drive')

import os
os.chdir('/content/drive/MyDrive')

import sys

sys.path.append('content/drive/MyDrive')
sys.path

import pandas as pd
import numpy as np
import time

"""종가데이터"""

df_stock = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/Close300.csv')

df_stock

stock_name = [ s[7:] for s in df_stock]
#stock_name

d={}
for i in range(191):
  d[i+1] = stock_name[i]

d

df_stock = df_stock.columns.values.tolist()
df_stock = df_stock[1:]
len(df_stock)
stock_code = [ s[:6] for s in df_stock]
stock_code

"""일자별 OHLCV(시가, 고가, 저가, 종가, 거래량) 조회"""

#stock_code = stock.get_market_ticker_list() # 현재일자 기준 가장 가까운 영업일의 코스피 상장종목 리스트
res = pd.DataFrame()
for ticker in stock_code:
    df = stock.get_market_ohlcv_by_date(fromdate="20190101", todate="20211231", ticker=ticker)
    df = df.assign(종목코드=ticker, 종목명=stock.get_market_ticker_name(ticker))
    res = pd.concat([res, df], axis=0)
    time.sleep(1)
res = res.reset_index()
res

"""일자별 DIV/BPS/PER/EPS 조회"""

#stock_code = stock.get_market_ticker_list() # 현재일자 기준 가장 가까운 영업일의 코스피 상장종목 리스트
res2 = pd.DataFrame()
for ticker in stock_code:
    df = stock.get_market_fundamental_by_date(fromdate="20190101", todate="20211231", ticker=ticker)
    df = df.assign(종목코드=ticker, 종목명=stock.get_market_ticker_name(ticker))
    res2 = pd.concat([res2, df], axis=0)
    time.sleep(1)
res2 = res2.reset_index()
res2

"""전날대비 종가 변화량 데이터"""

df_change = pd.read_csv('/content/drive/MyDrive/data/stock/dataset/RAW/Change300.csv')
df_change

"""#DTW

*   DTW(Dynamic time wrapping): 두 개의 시계열 데이터간의 유사도 알아내는 시계열 패턴 매칭 알고리즘

**1번째 종목(BGF리테일)과 유사한 종목 찾기**

## 종가변화량
"""

!pip install dtw-python
import dtw

x1 = df_change.iloc[:,1]

li=[]
for i in range(1,192): #x1제외
  x2 = df_change.iloc[:,i]
  d = dtw.dtw(x1,x2,keep_internals=True).distance
  li.append([d,i])

li = sorted(li,key = lambda x:x[0])
li

"""* 종가변화량 유사 상위 30개 종목






"""

for i in range(1,31):
  print(d[li[i][1]])

"""

*   total에 유사도 누적 
"""

total = {}
for i in range(1,192):
  total[i] = 0

for i in range(191):
  total[li[i][1]] = i
total

# score=[0]*192
# for i in range(191):
#   score[li[i][1]] = i+1

mmin = li[0][1]
x2 = df_change.iloc[:,mmin]

dtw.dtw(x1,x2,keep_internals=True).plot(type="twoway")
dtw.dtw(x1,x2,keep_internals=True).distance

"""## ROE"""

res2['ROE'] = res2['BPS']/res2['EPS']
res2

res2.isnull().sum()

"""---


Q. ROE값을 쓰는게 맞는지???

---

## PER

모든 종목간 DTW값 구해서 리스트에 저장 -> 정렬
"""

data1 = res2[0:742]["PER"]

dtw_per =[]
n=1
for i in range(0,len(res2),742):
  data2 = res2[i:i+742]["PER"]
  d = dtw.dtw(data1,data2,keep_internals=True).distance
  dtw_per.append([d,n])
  n += 1

dtw_per = sorted(dtw_per,key = lambda x:x[0])
dtw_per

"""* PER 유사 상위 30개 종목



"""

for i in range(1,31):
  print(d[dtw_per[i][1]])

for i in range(191):
  total[dtw_per[i][1]] += i

total

len(dtw_per)

# for i in range(1,191):
#   score[dtw_per[i][1]]= score[dtw_per[i][1]] + i

#141722//191 =742
mmin = dtw_per[1][1]
data2 = res2[742*mmin:742*(mmin+1)]["PER"]

"""PER DTW 최소 distance 시각화"""

dtw.dtw(data1,data2,keep_internals=True).plot(type="twoway")
dtw.dtw(data1,data2,keep_internals=True).distance

"""## PBR"""

data1 = res2[0:742]["PBR"]


dtw_pbr =[]
n=1
for i in range(0,len(res2),742):
  data2 = res2[i:i+742]["PBR"]
  d = dtw.dtw(data1,data2,keep_internals=True).distance
  dtw_pbr.append([d,n])
  n += 1

dtw_pbr = sorted(dtw_pbr,key = lambda x:x[0])
dtw_pbr

"""* PBR 유사 상위 30개 종목"""

for i in range(1,31):
  print(d[dtw_pbr[i][1]])

for i in range(191):
  total[dtw_pbr[i][1]] += i

total

mmin = dtw_pbr[1][1]

data2 = res2[742*mmin:742*(mmin+1)]["PBR"]
dtw.dtw(data1,data2,keep_internals=True).plot(type="twoway")

"""* 누적 유사 상위 30개 종목"""

import operator 
total1 = sorted(total.items(),key = operator.itemgetter(1))
total1

for i in range(1,31):
  print(d[total1[i][0]])

